apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: {{ template "mongodb-replication.fullname" . }}
  labels:
    app: {{ template "mongodb-replication.name" . }}
    chart: {{ template "mongodb-replication.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    # this label will be used for count running pods
    name: {{ template "mongodb-replication.fullname" . }}
spec:
  replicas: {{ .Values.replicaCount }}
  # pets get DNS/hostnames that follow the pattern: ${metadata.name}-NUM.${spec.serviceName}.default.svc.cluster.local
  serviceName: "{{ template "mongodb-replication.fullname" . }}-internal"
  selector:
    matchLabels:
      app: {{ template "mongodb-replication.name" . }}
      release: {{ .Release.Name }}          
      name: {{ template "mongodb-replication.fullname" . }}
  template:
    metadata:
      labels:
        app: {{ template "mongodb-replication.name" . }}
        release: {{ .Release.Name }}
        # this label will be used for count running pods
        name: {{ template "mongodb-replication.fullname" . }}
        {{- if .Values.mongodbBackupEnabled }}
        backup: mongodb
        {{- end }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: mongodb
              containerPort: 27017
              protocol: TCP
          args:
            - "run-mongod-pet"
          volumeMounts:
            - name: mongo-data
              mountPath: /var/lib/mongodb/data
          env:
            - name: MONGODB_USER
              value: {{ .Values.mongodbUsername }}
            - name: MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "mongodb-replication.fullname" . }}
                  key: mongodb-password
            - name: MONGODB_DATABASE
              value: {{ .Values.mongodbDatabase }}
            - name: MONGODB_REPLICA_NAME
              value: {{ .Values.mongodbReplicaName }}
            - name: MONGODB_KEYFILE_VALUE
              valueFrom:
                secretKeyRef:
                  name: {{ template "mongodb-replication.fullname" . }}
                  key: mongodb-key-file-value
            - name: MONGODB_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "mongodb-replication.fullname" . }}
                  key: mongodb-admin-password
            - name: MONGODB_SERVICE_NAME
              value: "{{ template "mongodb-replication.fullname" . }}-internal"
          readinessProbe:
            exec:
              command:
                - stat
                - /tmp/initialized          
          resources:
{{ toYaml .Values.resources | indent 12 }}
  volumeClaimTemplates:
    - metadata:
        name: mongo-data
        annotations:
          # Uncomment this if using dynamic volume provisioning.
          # https://docs.openshift.org/latest/install_config/persistent_storage/dynamically_provisioning_pvs.html
          # volume.alpha.kubernetes.io/storage-class: anything
      spec:
        # the volume can be mounted as read-write by a single node
        accessModes: [ ReadWriteOnce ]
        resources:
          requests:
            storage: {{ .Values.persistence.size }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
